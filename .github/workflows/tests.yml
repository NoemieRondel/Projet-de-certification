name: API Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: api_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD_TEST_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Wait for MySQL to be ready
        run: |
          echo "Attente que MySQL soit prêt en utilisant le nom du service..."
          for i in {1..60}; do
            if mysql --connect-timeout=1 -h mysql -P 3306 -u ${{ env.DB_USER }} -p"${{ env.DB_PASSWORD }}" -e "SELECT 1" &> /dev/null; then
              echo "MySQL est prêt et accessible via le nom du service !"
              break
            fi
            echo "En attente de MySQL via 'mysql' ($i)..."
            sleep 1
          done
        env:
          DB_USER: test_user
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD_TEST_USER }}


      - name: Set up Database Schema
        run: |
          echo "Configuration du schéma de base de données..."
          mysql -h mysql -P 3306 -u ${{ env.DB_USER }} -p"${{ env.DB_PASSWORD }}" ${{ env.DB_NAME }} < schema.sql
        env:
          DB_USER: test_user
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD_TEST_USER }}
          DB_NAME: api_test_db

      - name: Run unit and integration tests (excluding generation tests)
        env:
          DB_HOST: mysql
          DB_PORT: 3306
          DB_USER: test_user
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD_TEST_USER }}
          DB_NAME: api_test_db
        run: |
          pytest tests/ -k "not test_generate_summaries and not test_generate_keywords and not test_generate_keywords_scientific_articles"
